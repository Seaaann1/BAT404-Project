# -*- coding: utf-8 -*-
"""third.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ifLY4Z7ZzZnou97bBK7f2w8iNX10L19e
"""

import numpy as np

"""# Subsetting, Indexing, Slicing"""

samp1 = np.array([
    np.arange(i, i+5) for i in range(1,26,5)
])
print(samp1)

print(samp1[2,4])

print(samp1[-1])
print(samp1[-2, -2])

# samp1[ start : end]
print(samp1[0:5])

# slicing
print(samp1[ 1:4    # higest Dimension
            , :2])
print('\n',samp1[ 2, 1: 4])
print('\n',samp1[ 1:4, 1])

print(samp1[samp1 % 2 == 0])
print(samp1[ samp1 > 10])

# Fancy Index
print(samp1[[1,2,3],    # 2nd dimension
            [3,2,1]])   # 1st Dimnsion

print(samp1[[2], #2nd dimension
            [1]])#1st dimension

print(samp1[[1, 2], # Row
            :])     # column

print(samp1[ 1:4 , [0, 2, 4]])
print(samp1[:, [0,4]])

"""# Array Manipulation"""

arrmanip = np.array([[0,1,2,3,4, 5],
                  [6,7,8,9,10,11]])

print(arrmanip)
# transpose
samp3 = np.transpose(arrmanip)
print(samp3)

print(samp3.T)

# Flattens an n-dimension array without changing its original value.
print(samp1.ravel())

# reshapes an array without changing its original value.
samp4 = np.array([1,2,3,4,5,6,7,8,9])
print(samp4.reshape((3,3)))

samp5 = np.arange(1,26)
samp6 = samp5.reshape((5,5))
print(samp6)

# resize regardless of original array size
samp7 = np.array([[1,2,3,4],[5,6,7,8]])
print(samp7.resize((5,5)))
print(samp7)

# append array to the tail of first array
samp8 = np.arange(1,5)
samp9 = np.arange(5, 9)
print(np.append(samp9,  # first array
                samp8)) # array to append to first array

print(np.insert(
    samp8,  # Destination array
    2,      # index where to insert
    samp9   # what to insert
))

print(np.insert(
    samp8,  # Destination array
    2,      # index where to insert
    1000    # what to insert 
))

# delete items from an array
samp10 = np.arange(1, 10)
print(np.delete(samp10,     # array
                [3,-1, 0])) # indices to delete

"""# combining arrays"""

# concatenation
samp11 = np.array([[1,2,3,4],
                   [0,0,0,0]])
samp12 = np.array([[5,6,7,8],
                   [1,1,1,1]])
samp13 = np.array([[5,6,7,8],
                   [1,1,1,1]])

print(np.concatenate(
    (samp11, samp12, samp13), # list/ tuple of arrays to concatenate
    axis = 1
))

# vstack / r_

samp14 = np.array([1,2,3,4])
samp15 = np.array([5,6,7,8])

print("vstack", np.vstack((samp14, samp15)))
print("r_", np.r_[samp14,samp15])

# hstack / c_

samp16 = np.array([1,2,3,4])
samp17 = np.array([5,6,7,8])

print("hstack\n", np.hstack((samp16, samp17)))
print("c_\n", np.c_[samp16,samp17])

samp18 = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 0],
                   [10,11,12,13,14,15,16,17,18, 0]])
print(np.hsplit(samp18, 2))

samp19 = np.array([[1,2,3,4,5],
                   [6,7,8,9,0],
                   
                   [11,12,13,14,15],
                   [16,17,18,19,20]])
print(np.vsplit(samp19, 2))

"""# MATH"""

samp20 = np.array([1,2,3,4,5])
samp21 = np.array([6,7,8,9,0])

print(samp20 + samp21)
print(np.add(samp20, samp21))

print(samp20 ** np.array([1,2,3,4,5]))
print(np.exp(samp20))

mat1 = np.array([[2],
                 [3],
                 [4]])
mat2 = np.array([[3, 2]])

print(mat1.dot(mat2))

#test cell
print("this is a test update")